pred <- knn(ds.tr,ds.ts,cl.tr,k=8,prob=TRUE)
pred
acc <- mean(pred==cl.ts)
acc
table(pred,cl.ts)
pred <- knn(ds.tr,ds.ts,cl.tr,k=3,prob=TRUE)
pred
acc <- mean(pred==cl.ts)
acc
table(pred,cl.ts)
install.packages('cvTools')
library(cvTools)
k= 10
folds <- cvfolds(nrow(iris), K=k )
library(cvTools)
k= 10
folds <- cvfolds(nrow(iris), K=k )
install.packages('cvTools')
install.packages("cvTools")
library(cvTools)
k= 10
folds <- cvfolds(nrow(iris), K=k )
folds <- cvFolds(nrow(iris), K=k )
acc <- c()
ds.ts <- iris[ts.idx,1:4]
acc[i] <- mean(pred==cl.ts)
k= 10
folds <- cvFolds(nrow(iris), K=k )
acc <- c()
for(i in 1:k){
ts.idx <-  folds$which==i
ds.tr <- iris[-ts.idx,1:4]
ds.ts <- iris[ts.idx,1:4]
cl.tr <- factor(iris[-ts.idx,5])
cl.ts <- factor(iris[ts.idx,5])
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
acc[i] <- mean(pred==cl.ts)
}
acc <- c()
for(i in 1:k){
ts.idx <-  folds$which==i
ds.tr <- iris[-ts.idx,1:4]
ds.ts <- iris[ts.idx,1:4]
cl.tr <- factor(iris[-ts.idx,5])
cl.ts <- factor(iris[ts.idx,5])
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
acc[i] <- mean(pred==cl.ts)
}
pred <- knn (ds.tr,ds.ts,cl.tr,k=5)
acc <- c()
for(i in 1:k){
ts.idx <-  folds$which==i
ds.tr <- iris[-ts.idx,1:4]
ds.ts <- iris[ts.idx,1:4]
cl.tr <- factor(iris[-ts.idx,5])
cl.ts <- factor(iris[ts.idx,5])
pred <- knn (ds.tr,ds.ts,cl.tr,k=5)
acc[i] <- mean(pred==cl.ts)
}
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
acc <- c()
for(i in 1:k){
ts.idx <-  folds$which==i
ds.tr <- iris[-ts.idx,1:4]
ds.ts <- iris[ts.idx,1:4]
cl.tr <- factor(iris[-ts.idx,5])
cl.ts <- factor(iris[ts.idx,5])
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
acc[i] <- mean(pred==cl.ts)
}
pred <- knn.cv(ds.tr,ds.ts,cl.tr,k=5)
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
acc[i] <- mean(pred==cl.ts)
library(cvTools)
k= 10
folds <- cvFolds(nrow(iris), K=k )
acc <- c()
for(i in 1:k){
ts.idx <-  folds$which==i
ds.tr <- iris[-ts.idx,1:4]
ds.ts <- iris[ts.idx,1:4]
cl.tr <- factor(iris[-ts.idx,5])
cl.ts <- factor(iris[ts.idx,5])
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
acc[i] <- mean(pred==cl.ts)
}
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
ts.idx <-  folds$which==i
ds.tr <- iris[-ts.idx,1:4]
ds.ts <- iris[ts.idx,1:4]
cl.tr <- factor(iris[-ts.idx,5])
cl.ts <- factor(iris[ts.idx,5])
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
acc[i] <- mean(pred==cl.ts)
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
cl.tr <- factor(iris[-ts.idx,5])
cl.ts <- factor(iris[ts.idx,5])
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
acc[i] <- mean(pred==cl.ts)
pred <-  knn(ds.tr,ds.ts,cl.tr,k=5)
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
acc[i] <- mean(pred==cl.ts)
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
acc[i] <- mean(pred==cl.ts)
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
k= 10
folds <- cvFolds(nrow(iris), K=k )
acc <- c()
for(i in 1:k){
ts.idx <-  folds$which==i
ds.tr <- iris[-ts.idx,1:4]
ds.ts <- iris[ts.idx,1:4]
cl.tr <- factor(iris[-ts.idx,5])
cl.ts <- factor(iris[ts.idx,5])
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
acc[i] <- mean(pred==cl.ts)
}
knn
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
acc[i] <- mean(pred==cl.ts)
for(i in 1:k){
ts.idx <-  folds$which==i
ds.tr <- iris[-ts.idx,1:4]
ds.ts <- iris[ts.idx,1:4]
cl.tr <- factor(iris[-ts.idx,5])
cl.ts <- factor(iris[ts.idx,5])
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
acc[i] <- mean(pred==cl.ts)
}
library(class)
source('D:/workR2/cluster.R', encoding = 'UTF-8', echo=TRUE)
install.packages("cvTools")
k= 10
folds <- cvFolds(nrow(iris), K=k )
acc <- c()
for(i in 1:k){
ts.idx <-  folds$which==i
ds.tr <- iris[-ts.idx,1:4]
ds.ts <- iris[ts.idx,1:4]
cl.tr <- factor(iris[-ts.idx,5])
cl.ts <- factor(iris[ts.idx,5])
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
acc[i] <- mean(pred==cl.ts)
}
knn
knn
k= 10
folds <- cvFolds(nrow(iris), K=k )
acc <- c()
for(i in 1:k){
ts.idx <-  folds$which==i
ds.tr <- iris[-ts.idx,1:4]
ds.ts <- iris[ts.idx,1:4]
cl.tr <- factor(iris[-ts.idx,5])
cl.ts <- factor(iris[ts.idx,5])
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
acc[i] <- mean(pred==cl.ts)
}
library(class)
tr.idx <- c(1:25, 51:75, 101:125)
ds.tr <- iris[tr.idx,1:4]            #훈련용
ds.ts <- iris[-tr.idx, 1:4]            #테스트용
cl.tr <- factor(iris[tr.idx,5])     #훈련용 그룹정보
cl.ts <- factor(iris[-tr.idx,5])    #테스트 그룹정보
pred <- knn(ds.tr,ds.ts,cl.tr,k=3,prob=TRUE)
pred
acc <- mean(pred==cl.ts)
acc
table(pred,cl.ts)
install.packages('cvTools')
library(cvTools)
k= 10
folds <- cvFolds(nrow(iris), K=k )
acc <- c()
for(i in 1:k){
ts.idx <-  folds$which==i
ds.tr <- iris[-ts.idx,1:4]
ds.ts <- iris[ts.idx,1:4]
cl.tr <- factor(iris[-ts.idx,5])
cl.ts <- factor(iris[ts.idx,5])
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
acc[i] <- mean(pred==cl.ts)
}
mean(acc)
acc
st <- state.x77
library(cluster)
sft <- kmeans(x=st,center=5)
library(cluster)
std <-  function(x){
return ((x-min(x))/ (max(x)-min(x)))
}
st <- apply(state.x77,2,std)
sft <- kmeans(x=st, center= 5)
sft
clusplot(st,
sft$cluster,
color = TRUE,
shade = TRUE,
labels = 2,
lines = 1)
st
sft <- kmeans(x=st, center= 5)
sft
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
clusplot(st,
sft$cluster,
color = TRUE,
shade = TRUE,
labels = 2,
lines = 1)
clusplot(st,
sft$cluster,
color = TRUE,
shade = TRUE,
labels = 2,
lines = 0)
# mlbench 패키지에서 제공하는 Sonar 데이터셋에 대해 k-평균 군집화를 실시하고 결과를 그래프로 출력하시오.
#
#
#
# • 군집의 수는 2로 한다.
#
# • Sonar 데이터셋에서 마지막에 있는 Class 열은 제외하고 군집화를 실행한다.
#
#
#
install.packages("mlbench")
library( mlbench )
data( "Sonar" ) 			# 데이터셋 불러오기
sonar
Sonar
Sonar[-61]
Sonar[,-61]
Sonar
Sonar<- Sonar[,-61]
sf <- kmeans(x=Sonar,center=2)
Sonar<- Sonar[,-61]
sf <- kmeans(x=Sonar,center=2)
clusplot(Sonar,
sf$cluster,
color = TRUE,
shade = TRUE,
labels = 2,
lines = 0)
library( mlbench )
data( "Sonar" ) 			# 데이터셋 불러오기
Sonar<- Sonar[,-61]
sf <- kmeans(x=Sonar,center=2)
clusplot(Sonar,
sf$cluster,
color = TRUE,
shade = TRUE,
labels = 2,
lines = 0)
# mlbench 패키지에서 제공하는 Sonar 데이터셋에 대해 k-최근접 이웃 알고리즘을 이용하여 모델을 만들고 예측 정확도를 측정하시오.
#
#
#
# . Sonar 데이터셋에서 마지막에 있는 Class 열이 그룹 정보이다.
#
# . Sonar 데이터셋에서 홀수 번째 데이터(관측값)를 훈련용 데이터로 하고, 짝수번째 데이터(관측값)를 테스트용 데이터로 한다.
#
# . k-최근접 이웃에서 k를 3, 5, 7로 다르게 하여 예측 정확도를 비교한다.
#
library(class)
So <- Sonar
tr.idx <- c(1:25, 51:75, 101:125)
iris[tr.idx,1:4]
tr.idx
cl.tr
So
seq(1,length(Sonar),2)
tr.idx<- seq(1,length(Sonar),2)
ds.tr <- So[tr.idx]
ds.tr
ds.tr <- So[tr.idx,]
ds.tr
iris[tr.idx,1:4]
ds.ts <- So[-tr.idx,]
ds.ts
# mlbench 패키지에서 제공하는 Sonar 데이터셋에 대해 k-최근접 이웃 알고리즘을 이용하여 모델을 만들고 예측 정확도를 측정하시오.
#
#
#
# . Sonar 데이터셋에서 마지막에 있는 Class 열이 그룹 정보이다.
#
# . Sonar 데이터셋에서 홀수 번째 데이터(관측값)를 훈련용 데이터로 하고, 짝수번째 데이터(관측값)를 테스트용 데이터로 한다.
#
# . k-최근접 이웃에서 k를 3, 5, 7로 다르게 하여 예측 정확도를 비교한다.
#
Sonar
# mlbench 패키지에서 제공하는 Sonar 데이터셋에 대해 k-최근접 이웃 알고리즘을 이용하여 모델을 만들고 예측 정확도를 측정하시오.
#
#
#
# . Sonar 데이터셋에서 마지막에 있는 Class 열이 그룹 정보이다.
#
# . Sonar 데이터셋에서 홀수 번째 데이터(관측값)를 훈련용 데이터로 하고, 짝수번째 데이터(관측값)를 테스트용 데이터로 한다.
#
# . k-최근접 이웃에서 k를 3, 5, 7로 다르게 하여 예측 정확도를 비교한다.
#
data('Sonar')
Sonar
Sonar
library(class)
tr.idx<- seq(1,length(Sonar),2)
So <- Sonar
So
cl.tr <- factor(So[tr.idx,61])
cl.tr
# mlbench 패키지에서 제공하는 Sonar 데이터셋에 대해 k-최근접 이웃 알고리즘을 이용하여 모델을 만들고 예측 정확도를 측정하시오.
#
#
#
# . Sonar 데이터셋에서 마지막에 있는 Class 열이 그룹 정보이다.
#
# . Sonar 데이터셋에서 홀수 번째 데이터(관측값)를 훈련용 데이터로 하고, 짝수번째 데이터(관측값)를 테스트용 데이터로 한다.
#
# . k-최근접 이웃에서 k를 3, 5, 7로 다르게 하여 예측 정확도를 비교한다.
#
data('Sonar')
Sonar
library(class)
tr.idx<- seq(1,length(Sonar),2)
So <- Sonar
So
ds.tr <- So[tr.idx,-61]
ds.tr
ds.ts <- So[-tr.idx,-61]
ds.ts
cl.tr <- factor(So[tr.idx,61])
cl.tr
cl.ts <- factor(So[-tr.idx,61])
pred <- knn(ds.tr,ds.ts,cl.tr,k=3,prob = TRUE)
pred
acc <- mean(pred==cl.ts)
pred
cl.ts <- factor(So[-tr.idx,61])
pred <- knn(ds.tr,ds.ts,cl.tr,k=3,prob = TRUE)
pred
acc <- mean(pred==cl.ts)
acc
table(pred,cl.ts)
cl.ts
cl.tr
cl.tr <- factor(So[tr.idx,61])
cl.tr
cl.ts <- factor(So[-tr.idx,61])
cl.ts
pred <- knn(ds.tr,ds.ts,cl.tr,k=3,prob = TRUE)
pred
acc <- mean(pred==cl.ts)
pred
pred <- knn(ds.tr,ds.ts,cl.tr,k=3,prob = TRUE)
pred
So <- Sonar
So
ds.tr <- So[tr.idx,-61]
ds.tr
ds.ts <- So[-tr.idx,-61]
ds.ts
cl.tr <- factor(So[tr.idx,61])
cl.tr
cl.ts <- factor(So[-tr.idx,61])
cl.ts
pred <- knn(ds.tr,ds.ts,cl.tr,k=3,prob = TRUE)
pred
acc <- mean(pred==cl.ts)
acc
table(pred,cl.ts)
tr.idx <- c(1:25, 51:75, 101:125)
ds.tr <- iris[tr.idx,1:4]            #훈련용
ds.ts <- iris[-tr.idx, 1:4]            #테스트용
cl.tr <- factor(iris[tr.idx,5])     #훈련용 그룹정보
cl.tr
cl.ts <- factor(iris[-tr.idx,5])    #테스트 그룹정보
pred <- knn(ds.tr,ds.ts,cl.tr,k=3,prob=TRUE)
pred
acc <- mean(pred==cl.ts)
acc
table(pred,cl.ts)
pred <- knn(ds.tr,ds.ts,cl.tr,k=5,prob = TRUE)
pred
acc <- mean(pred==cl.ts)
acc
table(pred,cl.ts)
So <- Sonar
So
ds.tr <- So[tr.idx,-61]
ds.tr
ds.ts <- So[-tr.idx,-61]
ds.ts
cl.tr <- factor(So[tr.idx,61])
cl.tr
cl.ts <- factor(So[-tr.idx,61])
cl.ts
pred <- knn(ds.tr,ds.ts,cl.tr,k=5,prob = TRUE)
pred
acc <- mean(pred==cl.ts)
acc
table(pred,cl.ts)
tr.idx<- seq(1,nrow(Sonar),2)
So <- Sonar
So
ds.tr <- So[tr.idx,-61]
ds.tr
ds.ts <- So[-tr.idx,-61]
ds.ts
cl.tr <- factor(So[tr.idx,61])
cl.tr
cl.ts <- factor(So[-tr.idx,61])
cl.ts
pred <- knn(ds.tr,ds.ts,cl.tr,k=5,prob = TRUE)
pred
acc <- mean(pred==cl.ts)
acc
table(pred,cl.ts)
pred <- knn(ds.tr,ds.ts,cl.tr,k=3,prob = TRUE)
pred
acc <- mean(pred==cl.ts)
acc
table(pred,cl.ts)
pred <- knn(ds.tr,ds.ts,cl.tr,k=5,prob = TRUE)
pred
acc <- mean(pred==cl.ts)
acc
pred <- knn(ds.tr,ds.ts,cl.tr,k=7,prob = TRUE)
pred
acc <- mean(pred==cl.ts)
acc
table(pred,cl.ts)
#k=5일떄 0.75
#k= 7일때 0.711538
data('Sonar')
Sonar
pred <- knn(ds.tr,ds.ts,cl.tr,k=3,prob = TRUE)
pred
acc <- mean(pred==cl.ts)
acc
table(pred,cl.ts)
library(cvTools)
k=3
folds <- cvFolds(nrow(Sonar),K=k)
acc <- c()
pred
tr.idx<- seq(1,nrow(Sonar),2)
So <- Sonar
So
ds.tr <- So[tr.idx,-61]
ds.tr
ds.ts
cl.tr <- factor(So[tr.idx,61])
cl.tr
cl.ts <- factor(So[-tr.idx,61])
cl.ts
pred <- knn(ds.tr,ds.ts,cl.tr,k=7,prob = TRUE)
pred
pred <- knn(ds.tr,ds.ts,cl.tr,k=7)
pred
pred <- knn(ds.tr,ds.ts,cl.tr,k=7,prob = TRUE)
pred
library(cvTools)
k=5
folds <- cvFolds(nrow(Sonar),K=k)
acc <- c()
for(i in 1:K){
ts.idx <- folds$which==i
ds.tr <- So[tr.idx,-61]
ds.ts <- So[-tr.idx,-61]
cl.tr <- factor(So[tr.idx,61])
cl.ts <- factor(So[-tr.idx,61])
pred <- knn(ds.tr,ds.ts,cl.tr,k=3)
acc[i] <- mean(pred==cl.ts)
}
folds <- cvFolds(nrow(iris), K=k )
acc <- c()
for(i in 1:k){
ts.idx <-  folds$which==i
ds.tr <- iris[-ts.idx,1:4]
ds.ts <- iris[ts.idx,1:4]
cl.tr <- factor(iris[-ts.idx,5])
cl.ts <- factor(iris[ts.idx,5])
pred <- knn(ds.tr,ds.ts,cl.tr,k=5)
acc[i] <- mean(pred==cl.ts)
}
k=5
folds <- cvFolds(nrow(Sonar),K=k)
acc <- c()
k=5
folds <- cvFolds(nrow(Sonar),K=k)
acc <- c()
for(i in 1:k){
ts.idx <- folds$which==i
ds.tr <- So[tr.idx,-61]
ds.ts <- So[-tr.idx,-61]
cl.tr <- factor(So[tr.idx,61])
cl.ts <- factor(So[-tr.idx,61])
pred <- knn(ds.tr,ds.ts,cl.tr,k=3)
acc[i] <- mean(pred==cl.ts)
}
acc
mean(acc)
