nrow(m3)
ncol(person.info)
ncol(m3)
head(iris)
tail(iris)
str(iris)
iris[,5]
unique(iris[,5])
table(iris[,'species'])
dim(person.info)
nrow(person.ifo)
nrow(m3)
ncol(person.info)
ncol(m3)
head(iris)
tail(iris)
str(iris)
iris[,5]
unique(iris[,5])
table(iris[,'Species'])
dim(person.info)
nrow(person.info)
nrow(m3)
ncol(person.info)
ncol(m3)
head(iris)
tail(iris)
str(iris)
iris[,5]
unique(iris[,5])
table(iris[,'Species'])
dim(iris)
str(iris)
str(person.info)
str(city.info)
table(iris[,'Species'])
table(person.info[ , 'blood.type'])
tabel(persin.info[ , 'age'])
unique(iris[,5])                 #중복된 데이터를 하나씩 뽑아서 벡터형으로 나열해라.
#matrix/Data Frame 사용함수
#행별/ 열 별 합계와 평균 계산
colSums(iris[, -5])
rowSums(iris[, -5])
#조건에 맞는 행과 열의 값 추출(DATA FRAME만 가능)
IR.1 <- subset( iris, Species == 'setosa')
IR.2
IR.2[ , c(2,4)]
#matrix/Data Frame 사용함수
#행별/ 열 별 합계와 평균 계산
colSums(iris[, -5])
colMeans(iris[, -5])
rowSums(iris[, -5])
rowMeans(iris[, -5])
#행/열 방향 전환
z <- matrix(1:20, nrow=4, ncol= 5)
z
#조건에 맞는 행과 열의 값 추출(DATA FRAME만 가능)
IR.1 <- subset( iris, Species == 'setosa')
IR.1
IR.2 <- subset(iris, Sepal.Length> 5.0 &Sepal.Length >4.0)
IR.2
IR.2[ , c(2,4)]
#matrix/Data Frame 사용함수
#행별/ 열 별 합계와 평균 계산
colSums(iris[, -5])
apply( iris[ , 1:4 ], 2, sum)
colMeans(iris[, -5])
apply( iris[ , 1:4 ], 2, mean)
rowSums(iris[, -5])
apply( iris[ , -5 ], 2, sum)
rowMeans(iris[, -5])
apply( iris[ , -5 ], 2, mean)
#행/열 방향 전환
z <- matrix(1:20, nrow=4, ncol= 5)
z
t(z)
#조건에 맞는 행과 열의 값 추출(DATA FRAME만 가능)
IR.1 <- subset( iris, Species == 'setosa')
IR.1
IR.2 <- subset(iris, Sepal.Length> 5.0 &Sepal.Length >4.0)
IR.2
IR.2[ , c(2,4)]
#Matrix와 Data Frame에서 사용하는 함수
dim(person.info)
nrow(person.info)
nrow(m3)
ncol(person.info)
ncol(m3)
head(iris)
tail(iris)
str(iris)                #데이터 셋에 들어가는 행과 열을을 알아낼수있다.
str(city.info)
str(person.info)
iris[,5]
unique(iris[,5])                 #중복된 데이터를 하나씩 뽑아서 벡터형으로 나열해라.
table(iris[,'Species'])
table(person.info[ , 'blood.type'])   #종류별 카운터를 해줌.팩터일때만.
tabel(persin.info[ , 'age'])          #factor가 아니라서 찾지 못한다.
#data frame은 변수 중심으로 진행이 된다.
dim(iris)    # 150 5 즉 변수(열)가 150개 관측치(행)가 5개
colSums(iris[, -5])
apply( iris[ , 1:4 ], 2, sum)     #1.행 2.열 3.동작 //
apply( iris[ , 1:4 ], 3, sum)     #1.행 2.열 3.동작 //
apply( iris[ , 1:4 ], 4, sum)     #1.행 2.열 3.동작 //
apply( iris[ , -5 ], 1, sum)
apply( iris[ , -5 ], 1, sum)
apply( iris[ , 1:4 ], 2, mean)
apply( iris[ , -5 ], 1, mean)
rowSums(iris[, -5])
apply(iris[,-5],2,median)
#행/열 방향 전환
z <- matrix(1:20, nrow=4, ncol= 5)
z
t(z)
#행별/ 열 별 합계와 평균 계산
colSums(iris[, -5])     #변수의 합계만 구하겠다.
apply( iris[ , 1:4 ], 2, sum)     #1.행 2.방향 1은 행방향2는 열방향 3.동작 //
colMeans(iris[, -5])         #변수의 평균만 구하겠다.
apply( iris[ , 1:4 ], 2, mean)
rowSums(iris[, -5])             #행의 합계만 구해라
apply( iris[ , -5 ], 1, sum)
rowMeans(iris[, -5])
apply( iris[ , -5 ], 1, mean)
apply(iris[,-5],2,median)        #중앙값을 구해라.
#행/열 방향 전환
z <- matrix(1:20, nrow=4, ncol= 5)
z
t(z)
#조건에 맞는 행과 열의 값 추출(DATA FRAME만 가능)
IR.1 <- subset( iris, Species == 'setosa')
IR.1
IR.2 <- subset(iris, Sepal.Length> 5.0 &Sepal.Length >4.0)
IR.2
IR.2[ , c(2,4)]
#조건에 맞는 행과 열의 값 추출(DATA FRAME만 가능)
IR.1 <- subset( iris, Species == 'setosa')
IR.1
IR.2 <- subset(iris, Sepal.Length> 5.0 &Sepal.Width >4.0)
IR.2
IR.2[ , c(2,4)]
#Matrix/ Data Frame 산술연산
a <- matrix(1:20,4,5)
a
b <- matrix(21:40,4,5)
b
2*a
b-5
2*a +3*b
a+b
b-a
b/a
a*b
is.data.frame(iris)
is.mairix(state.x77)
is.data.frame(state.x77)
st <- data.frame(state.x)
st <- data.frame(state.x77)
head(st)
class(st)
iris.m <- as.matrix(iris[ , 1:4])
head(iris.m)
#### Matrix /Data Frame 자료구조 확인/ 변환
class(iris)
class(state.x77)
is.matrix(iris)
is.data.frame(iris)
is.mairix(state.x77)
is.data.frame(state.x77)
st <- data.frame(state.x77)
str(st)
head(st)
class(st)
iris.m <- as.matrix(iris[ , 1:4])
head(iris.m)
class(iris.m)
class(iris)
str(iris)
str(state.x77)
(iris)
str(iris)
str(state.x77)
is.matrix(iris)
is.data.frame(iris)
is.mairix(state.x77)
is.data.frame(state.x77)
is.matrix(state.x77)
is.matrix(iris)
is.data.frame(iris)
is.matrix(state.x77)
is.data.frame(state.x77)
is.matrix(iris)
is.matrix(iris)
is.matrix(iris)
is.matrix(iris)
is.matrix(iris)
is.data.frame(iris)
is.matrix(state.x77)
is.data.frame(state.x77)
st <- data.frame(state.x77)
str(st)
head(st)
class(st)
iris.m <- as.matrix(iris[ , 1:4])
head(iris.m)
class(iris.m)
class(st)
dim(st)
iris.m <- as.matrix(iris[ , 1:4])
head(iris.m)
class(iris.m)
str(iris.m)
population
population
head(st)
population
attach(st)
population
head(st)
Population
attach(st)
Population
head( st )
Population
attach( st )
Population
head( st )
Population
attach( st )
Population
head( st )
Population
attach( st )
Population
head( st )
Population
attach( st )
Population
head( st )
Population
attach( st )
Population
head( st )
Population
attach( st )
Population
head( st )
Population
attach( st )
Population
head( st )
Population
attach( st )
Population
head( st )
Population
attach( st )
Population
head( st )
Population
attach( st )
Population
head( st )
Population
attach( st )
Population
head( st )
Population
attach( st )
Population
head( st )
Population
attach( st )
Population
detach( st )
Population
Population
detach( st )
Population
head( st )
Population
attach( st )              #변수명을 사용할 수 있게 만든다
#Matrix/ Data Frame 산술연산
a <- matrix(1:20,4,5)
a
b <- matrix(21:40,4,5)
b
2*a    #해당셀에 전부 2를 곱해라
b-5         #해당셀에 전부 5를빼라
2*a +3*b        #각 해당셀에 대하여 연산을 실행하고 더해라
a+b
b-a
b/a
a*b
#### Matrix /Data Frame 자료구조 확인/ 변환
class(iris)                   #data frame인지 matrix 인지 구분
str(iris)
str(state.x77)
class(state.x77)
#논리 값으로 판별
is.matrix(iris)
is.data.frame(iris)
is.matrix(state.x77)
is.data.frame(state.x77)
st <- data.frame(state.x77)
str(st)
head(st)
class(st)
dim(st)
iris.m <- as.matrix(iris[ , 1:4])             #데이터 프레임을 매트릭스로 변환할때 쓴다.
head(iris.m)
class(iris.m)
str(iris.m)
#행하나 전체가 관측치이다.
class(air)
dim(air)
sr(air)
str(air)
setwd("D:/workR/excel")
air <- read.csv("airquality.csv", header = T)
class(air)
dim(air)
str(air)
head(air)
tail(air)
setwd("D:/workR/excel")
air <- read.csv("airquality.csv", header = T)
class(air)
dim(air)
str(air)
head(air)
tail(air)
setwd("D:/workR/excel")
air <- read.csv("airquality.csv", header = T)
class(air)
dim(air)
str(air)
head(air)
tail(air)
air <- read.csv("airquality.csv", )
air <- read.csv("airquality.csv")
head(air)
air <- read.csv("airquality.csv",111111)
head(air)
head(air)
write.csv(person.info, 'person_info.csv',row.names=F)
setwd("D:/workR/excel")            #경로지정
write.csv(person.info, 'person_info.csv',row.names=F)
#csv file 내용 읽기.
setwd("D:/workR/excel")            #경로지정
air <- read.csv("airquality.csv", header = T)  #csv파일을 읽어오는 방법.
#데이타 프레임을 만들면 꼭 확인해야한느 작업.
class(air)
dim(air)
str(air)
head(air)
tail(air)
name <- c('Hong','Kim','Lee')
age <- c(22,20,25)
gender = factor(c('M','F','M'))
blood.type = factor(c('A','B','O'))
person.info <- data.frame(name,age,gender,blood.type)
person.info
setwd("D:/workR/excel")            #경로지정
write.csv(person.info, 'person_info.csv',row.names=F)      #csv파일을 저장하는 방법.
setwd("D:/workR/excel")            #경로지정
air <- read.csv("airquality.csv", header = T)  #csv파일을 읽어오는 방법.
#데이타 프레임을 만들면 꼭 확인해야한느 작업.
class(air)
dim(air)
str(air)
head(air)
tail(air)
matrix(c(10,40,60,20,21,60,70,30),nrow = 4,ncol = 2)
colnames(score) <- c('male','female')
socre <- matrix(c(10,40,60,20,21,60,70,30),nrow = 4,ncol = 2)
colnames(score) <- c('male','female')
rownames(score) <- c('male','female')
colnames(score) <- c('male','female')
rix score를 생성
matrix(c(10,40,60,20,21,60,70,30),nrow = 4,ncol = 2)
#2. score의 열 이름을 각각 male, female로 바꾸시오
score <- matrix(c(10,40,60,20,21,60,70,30),nrow = 4,ncol = 2)
colnames(score) <- c('male','female')
score <- matrix(c(10,40,60,20,21,60,70,30),nrow = 4,ncol = 2)
colnames(score) <- c('male','female')
score
score[2]
score[2,]
score[ , 2]
#  5. 3행 2열의 값을 출력
score[3,2]
st <- data.frame(state.x77)
st
dir(st)
dir[st]
dim[st]
dim(st)
st[, 8]
st[, 8]
st[ , 8]
st[ 50,]
state.x77[,8]
#4. st의 행 이름 출력
state.x77[50, ]
st[,8]
#5. st의 행의 개수와 열의 개수 출력
st[,8 ,head = T]
st[,8 ,head = T]
#5. st의 행의 개수와 열의 개수 출력
dim(st)
str(st)
rowsum(st[,8])
rowsum(st[,-5])
rowSums(iris[, -5])
apply(st[ , -8],1,sum)
apply(st[ , -8],2,sum)
apply(st[ , -1],1,sum)
apply(st[ , -1],2,sum)
apply(st[ , ],2,sum)
apply(st[ , ],1,sum)
apply(st[,],1,mean)
apply(st[,],2,mean)
st1 <- subset(iris, Florida == )
IR.1 <- subset( iris, Species == 'setosa')
IR.1
iris
state.x77
st1 <- subset(state.x77, Population == 8277)
st1
st1 <- subset(state.x77, Income)
st1 <- subset(state.x77, Income == all)
st1 <- subset(state.x77, Income == 'all')
st1
st1 <- subset(state.x77, Income == )
st1 <- subset(state.x77, Income >0.0 )
source('D:/workR/jinwook\'s.R', encoding = 'UTF-8', echo=TRUE)
st1[ , 3]
source('D:/workR/jinwook\'s.R', encoding = 'UTF-8', echo=TRUE)
st1[ , 2]
#9. Florida 주의 모든 정보 출력
st1 <- subset(state.x77, Population == 8277)
st1
#10. 50개 주의 수입(Income) 정보만 출력
st1[ , 2]
st1[ , 3]
st1 <- data.frame(state.x)
st1 <- data.frame(state.x77)
st1
st1[ , 3]
st1[ , 2]
st1 <- data.frame(state.x77)
st1
iris[ , c(1:2)]
iris[ , c(1,3,5)]
iris[ , c('Sepal.Length','species')]
iris[1:5, ]
iris[1:5, c(1,3)]
iris[ , c('Sepal.Length','Species')]
st1[ , c('Income')]
st1['Texas','Area']
st1['Texas','Area']
#11. Texas 주의 면적(Area)을 출력
st1 <- data.frame(state.x77)
st1
st1['Texas','Area']
st1['Ohio',c('Population','Income')]
st1['Ohio',c('Population','Income')]
st1 <- data.frame(state.x77)
st1['Ohio',c('Population','Income')]
st1 <- subset(state.x77, Population >5000)
st1
st1 <- subset(state.x77,Income >4500)
st1
st1[, 'Income','Population','Area']
st1[,c('Income','Population','Area')]
st1
st1 <- subset(state.x77,Income >4500)
nrow(st1)
st1 <- data.frame(state.x77)
st1 <- subset(state.x77,Area>1000000&Frost>120)
st1
st1 <- subset(state.x77, Area>100000&Frost>120)
st1
st1 <- data.frame(state.x77)
st1 <- subset(state.x77, Population<2000 & Murder<12)
st
st1 <- data.frame(state.x77)
st1 <- subset(state.x77, Population<2000 & Murder<12)
st
st1 <- data.frame(state.x77)
st1 <- subset(state.x77, Area>100000&Frost>120)
st1
st1 <- subset(state.x77, Population<2000)
st
st1 <- subset(state.x77, Population<200)
st
st1
st1 <- subset(state.x77, Population<2000 & Murder<12)
st1
st1 <- subset(state.x77, Illiteracy>2.0)
st1[, c('Income')]
apply(st1[, c('Income')],2,mean)
st1 <- data.frame(state.x77)
st1 <- subset(state.x77, Illiteracy>2.0)
apply(st1[, c('Income')],2,mean)
apply(st1[, c('Income')],1,mean)
st1 <- data.frame(state.x77)
st1 <- subset(state.x77, Illiteracy>2.0)
apply(st1[, c('Income')],1,mean)
apply(st1[, c('Income')],2,mean)
st1 <- subset(state.x77, Illiteracy>2.0)["Income"]
st1
